'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var core$1 = require('@angular/core');
var core = require('@ionic-native/core');

var ɵngcc0 = require('@angular/core');
var NativeGeocoder = /** @class */ (function (_super) {
    tslib.__extends(NativeGeocoder, _super);
    function NativeGeocoder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativeGeocoder.prototype.reverseGeocode = function (latitude, longitude, options) { return core.cordova(this, "reverseGeocode", { "callbackOrder": "reverse" }, arguments); };
    NativeGeocoder.prototype.forwardGeocode = function (addressString, options) { return core.cordova(this, "forwardGeocode", { "callbackOrder": "reverse" }, arguments); };
    NativeGeocoder.pluginName = "NativeGeocoder";
    NativeGeocoder.plugin = "cordova-plugin-nativegeocoder";
    NativeGeocoder.pluginRef = "nativegeocoder";
    NativeGeocoder.repo = "https://github.com/sebastianbaar/cordova-plugin-nativegeocoder";
    NativeGeocoder.platforms = ["iOS", "Android"];
NativeGeocoder.ɵfac = function NativeGeocoder_Factory(t) { return ɵNativeGeocoder_BaseFactory(t || NativeGeocoder); };
NativeGeocoder.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NativeGeocoder, factory: function (t) { return NativeGeocoder.ɵfac(t); } });
var ɵNativeGeocoder_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(NativeGeocoder);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NativeGeocoder, [{
        type: core$1.Injectable
    }], null, null); })();
    return NativeGeocoder;
}(core.IonicNativePlugin));

exports.NativeGeocoder = NativeGeocoder;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJidW5kbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OzswQkFHTTtBQUNOO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgdHNsaWIgPSByZXF1aXJlKCd0c2xpYicpO1xudmFyIGNvcmUkMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnQGlvbmljLW5hdGl2ZS9jb3JlJyk7XG5cbnZhciBOYXRpdmVHZW9jb2RlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYi5fX2V4dGVuZHMoTmF0aXZlR2VvY29kZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTmF0aXZlR2VvY29kZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgTmF0aXZlR2VvY29kZXIucHJvdG90eXBlLnJldmVyc2VHZW9jb2RlID0gZnVuY3Rpb24gKGxhdGl0dWRlLCBsb25naXR1ZGUsIG9wdGlvbnMpIHsgcmV0dXJuIGNvcmUuY29yZG92YSh0aGlzLCBcInJldmVyc2VHZW9jb2RlXCIsIHsgXCJjYWxsYmFja09yZGVyXCI6IFwicmV2ZXJzZVwiIH0sIGFyZ3VtZW50cyk7IH07XG4gICAgTmF0aXZlR2VvY29kZXIucHJvdG90eXBlLmZvcndhcmRHZW9jb2RlID0gZnVuY3Rpb24gKGFkZHJlc3NTdHJpbmcsIG9wdGlvbnMpIHsgcmV0dXJuIGNvcmUuY29yZG92YSh0aGlzLCBcImZvcndhcmRHZW9jb2RlXCIsIHsgXCJjYWxsYmFja09yZGVyXCI6IFwicmV2ZXJzZVwiIH0sIGFyZ3VtZW50cyk7IH07XG4gICAgTmF0aXZlR2VvY29kZXIucGx1Z2luTmFtZSA9IFwiTmF0aXZlR2VvY29kZXJcIjtcbiAgICBOYXRpdmVHZW9jb2Rlci5wbHVnaW4gPSBcImNvcmRvdmEtcGx1Z2luLW5hdGl2ZWdlb2NvZGVyXCI7XG4gICAgTmF0aXZlR2VvY29kZXIucGx1Z2luUmVmID0gXCJuYXRpdmVnZW9jb2RlclwiO1xuICAgIE5hdGl2ZUdlb2NvZGVyLnJlcG8gPSBcImh0dHBzOi8vZ2l0aHViLmNvbS9zZWJhc3RpYW5iYWFyL2NvcmRvdmEtcGx1Z2luLW5hdGl2ZWdlb2NvZGVyXCI7XG4gICAgTmF0aXZlR2VvY29kZXIucGxhdGZvcm1zID0gW1wiaU9TXCIsIFwiQW5kcm9pZFwiXTtcbiAgICBOYXRpdmVHZW9jb2Rlci5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IGNvcmUkMS5JbmplY3RhYmxlIH1cbiAgICBdO1xuICAgIHJldHVybiBOYXRpdmVHZW9jb2Rlcjtcbn0oY29yZS5Jb25pY05hdGl2ZVBsdWdpbikpO1xuXG5leHBvcnRzLk5hdGl2ZUdlb2NvZGVyID0gTmF0aXZlR2VvY29kZXI7XG4iXX0=